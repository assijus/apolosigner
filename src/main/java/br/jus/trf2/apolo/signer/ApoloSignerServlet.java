package br.jus.trf2.apolo.signer;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.UUID;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;

import org.apache.pdfbox.pdmodel.PDDocument;

import com.crivano.swaggerservlet.SwaggerServlet;
import com.crivano.swaggerservlet.SwaggerUtils;
import com.crivano.swaggerservlet.dependency.TestableDependency;

import br.jus.trf2.assijus.system.api.IAssijusSystem;

public class ApoloSignerServlet extends SwaggerServlet {
	private static final long serialVersionUID = -1611417120964698257L;
	public static String servletContext = null;

	public static ApoloSignerServlet INSTANCE = null;

	public static String getProp(String name) {
		return INSTANCE.getProperty(name);
	}

	@Override
	public void initialize(ServletConfig config) throws ServletException {
		this.INSTANCE = this;
		setAPI(IAssijusSystem.class);
		setActionPackage("br.jus.trf2.apolo.signer");

		// Redis
		//
		addRestrictedProperty("redis.database", "10");
		addPrivateProperty("redis.password", null);
		addRestrictedProperty("redis.slave.port", "0");
		addRestrictedProperty("redis.slave.host", null);
		addRestrictedProperty("redis.master.host", "localhost");
		addRestrictedProperty("redis.master.port", "6379");
		SwaggerUtils.setCache(new MemCacheRedis());

		addRestrictedProperty("pdfservice.url", null);

		addRestrictedProperty("datasource.name", "java:/jboss/datasources/ApoloDS");
		addRestrictedProperty("datasource.url", null);
		addRestrictedProperty("datasource.username", null);
		addPrivateProperty("datasource.password", null);
		addRestrictedProperty("datasource.schema", "testeapolotrf");

		addPrivateProperty("password", null);
		super.setAuthorization(getProperty("password"));

		addDependency(new TestableDependency("database", "apolods", false, 0, 10000) {
			@Override
			public String getUrl() {
				return getProperty("datasource.name");
			}

			@Override
			public boolean test() throws Exception {
				Utils.getConnection().close();
				return true;
			}
		});

		addDependency(new TestableDependency("process", "conversor-batch", true, 0, 10000) {
			@Override
			public String getUrl() {
				return getProperty("datasource.name") + "/batch-conv";
			}

			@Override
			public boolean test() throws Exception {
				Connection conn = null;
				PreparedStatement pstmt = null;
				ResultSet rset = null;
				try {
					conn = Utils.getConnection();
					pstmt = conn.prepareStatement(Utils.getSQL("test-batch-conv"));
					rset = pstmt.executeQuery();
					rset.next();
					int count = rset.getInt(1);
					if (count > 0)
						throw new Exception("Existem " + count + " arquivos pendentes de conversão há mais de 1 hora");
				} finally {
					if (rset != null)
						rset.close();
					if (pstmt != null)
						pstmt.close();
					if (conn != null)
						conn.close();
				}
				return true;
			}
		});

		addDependency(new TestableDependency("webservice", "conversor", false, 0, 10000) {

			@Override
			public String getUrl() {
				return getProperty("pdfservice.url");
			}

			@Override
			public boolean test() throws Exception {
				String docx = "";
				byte pdf[] = Utils.convertDocToPdf(SwaggerUtils.base64Decode(docx));
				int pagecount = PDDocument.load(pdf).getNumberOfPages();
				if (pagecount < 1)
					throw new Exception(
							"Não foi possível contar o número de páginas do PDF, provavelmente o documento está corrompido.");
				return pdf != null;
			}

		});

		addDependency(new TestableDependency("cache", "redis", false, 0, 10000) {

			@Override
			public String getUrl() {
				return "redis://" + MemCacheRedis.getMasterHost() + ":" + MemCacheRedis.getMasterPort() + "/"
						+ MemCacheRedis.getDatabase() + " (" + "redis://" + MemCacheRedis.getSlaveHost() + ":"
						+ MemCacheRedis.getSlavePort() + "/" + MemCacheRedis.getDatabase() + ")";
			}

			@Override
			public boolean test() throws Exception {
				String uuid = UUID.randomUUID().toString();
				MemCacheRedis mc = new MemCacheRedis();
				mc.store("test", uuid.getBytes());
				String uuid2 = new String(mc.retrieve("test"));
				return uuid.equals(uuid2);
			}
		});

	}
}
